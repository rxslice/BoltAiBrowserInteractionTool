@echo off
setlocal

echo Creating project directory...
md real-browser-interaction-tool
cd real-browser-interaction-tool

echo Creating package.json...
echo {>"package.json"
echo   "name": "real-browser-interaction-tool",>>"package.json"
echo   "version": "1.0.0",>>"package.json"
echo   "description": "A tool to interact with a real browser",>>"package.json"
echo   "main": "index.js",>>"package.json"
echo   "scripts": {>>"package.json"
echo     "start": "node index.js">> "package.json"
echo   },>>"package.json"
echo   "dependencies": {>>"package.json"
echo     "express": "^4.18.2",>>"package.json"
echo     "puppeteer": "^21.6.1",>>"package.json"
echo     "socket.io": "^4.7.2">> "package.json"
echo   }>>"package.json"
echo }>>"package.json"

echo Creating index.js...
echo const express = require('express');>"index.js"
echo const http = require('http');>>"index.js"
echo const { Server } = require('socket.io');>>"index.js"
echo const puppeteer = require('puppeteer');>>"index.js"
echo.>>"index.js"
echo const app = express();>>"index.js"
echo const server = http.createServer(app);>>"index.js"
echo const io = new Server(server);>>"index.js"
echo.>>"index.js"
echo app.use(express.static('public'));>>"index.js"
echo.>>"index.js"
echo let browser;>>"index.js"
echo let page;>>"index.js"
echo.>>"index.js"
echo async function setupBrowser() {>>"index.js"
echo   browser = await puppeteer.launch({ headless: "new" });>>"index.js"
echo   page = await browser.newPage();>>"index.js"
echo   await page.goto('about:blank');>>"index.js"
echo   page.on('console', (msg) => console.log('PAGE LOG:', msg.text()));>>"index.js"
echo }>>"index.js"
echo.>>"index.js"
echo io.on('connection', (socket) => {>>"index.js"
echo   console.log('Client connected');>>"index.js"
echo.>>"index.js"
echo   socket.on('loadURL', async (url) => {>>"index.js"
echo     try {>>"index.js"
echo       await page.goto(url, { waitUntil: 'networkidle2' });>>"index.js"
echo       const screenshot = await page.screenshot({ encoding: 'base64' });>>"index.js"
echo       socket.emit('pageUpdate', screenshot);>>"index.js"
echo     } catch (error) {>>"index.js"
echo       console.error('Error loading URL:', error);>>"index.js"
echo       socket.emit('error', 'Failed to load URL');>>"index.js"
echo     }>>"index.js"
echo   });>>"index.js"
echo.>>"index.js"
echo   socket.on('input', async (inputData) => {>>"index.js"
echo     try {>>"index.js"
echo       await page.focus(inputData.selector);>>"index.js"
echo       await page.keyboard.type(inputData.text);>>"index.js"
echo       const screenshot = await page.screenshot({ encoding: 'base64' });>>"index.js"
echo       socket.emit('pageUpdate', screenshot);>>"index.js"
echo     } catch (error) {>>"index.js"
echo       console.error('Error typing:', error);>>"index.js"
echo       socket.emit('error', 'Failed to type');>>"index.js"
echo     }>>"index.js"
echo   });>>"index.js"
echo.>>"index.js"
echo   socket.on('click', async (clickData) => {>>"index.js"
echo     try {>>"index.js"
echo       await page.click(clickData.selector);>>"index.js"
echo       const screenshot = await page.screenshot({ encoding: 'base64' });>>"index.js"
echo       socket.emit('pageUpdate', screenshot);>>"index.js"
echo     } catch (error) {>>"index.js"
echo       console.error('Error clicking:', error);>>"index.js"
echo       socket.emit('error', 'Failed to click');>>"index.js"
echo     }>>"index.js"
echo   });>>"index.js"
echo.>>"index.js"
echo   socket.on('hover', async (hoverData) => {>>"index.js"
echo     try {>>"index.js"
echo       await page.hover(hoverData.selector);>>"index.js"
echo       const screenshot = await page.screenshot({ encoding: 'base64' });>>"index.js"
echo       socket.emit('pageUpdate', screenshot);>>"index.js"
echo     } catch (error) {>>"index.js"
echo       console.error('Error hovering:', error);>>"index.js"
echo       socket.emit('error', 'Failed to hover');>>"index.js"
echo     }>>"index.js"
echo   });>>"index.js"
echo.>>"index.js"
echo   socket.on('focus', async (focusData) => {>>"index.js"
echo     try {>>"index.js"
echo       await page.focus(focusData.selector);>>"index.js"
echo       const screenshot = await page.screenshot({ encoding: 'base64' });>>"index.js"
echo       socket.emit('pageUpdate', screenshot);>>"index.js"
echo     } catch (error) {>>"index.js"
echo       console.error('Error focusing:', error);>>"index.js"
echo       socket.emit('error', 'Failed to focus');>>"index.js"
echo     }>>"index.js"
echo   });>>"index.js"
echo.>>"index.js"
echo   socket.on('keydown', async (keyData) => {>>"index.js"
echo     try {>>"index.js"
echo       await page.focus(keyData.selector);>>"index.js"
echo       await page.keyboard.press(keyData.key);>>"index.js"
echo       const screenshot = await page.screenshot({ encoding: 'base64' });>>"index.js"
echo       socket.emit('pageUpdate', screenshot);>>"index.js"
echo     } catch (error) {>>"index.js"
echo       console.error('Error keydown:', error);>>"index.js"
echo       socket.emit('error', 'Failed to keydown');>>"index.js"
echo     }>>"index.js"
echo   });>>"index.js"
echo.>>"index.js"
echo   socket.on('contextmenu', async (menuData) => {>>"index.js"
echo     try {>>"index.js"
echo       await page.evaluate((selector) => {>>"index.js"
echo         const element = document.querySelector(selector);>>"index.js"
echo         if (element) {>>"index.js"
echo           element.dispatchEvent(new MouseEvent('contextmenu', {>>"index.js"
echo             bubbles: true,>>"index.js"
echo             cancelable: true,>>"index.js"
echo             view: window>>"index.js"
echo           }));>>"index.js"
echo         }>>"index.js"
echo       }, menuData.selector);>>"index.js"
echo       const screenshot = await page.screenshot({ encoding: 'base64' });>>"index.js"
echo       socket.emit('pageUpdate', screenshot);>>"index.js"
echo     } catch (error) {>>"index.js"
echo       console.error('Error contextmenu:', error);>>"index.js"
echo       socket.emit('error', 'Failed to contextmenu');>>"index.js"
echo     }>>"index.js"
echo   });>>"index.js"
echo.>>"index.js"
echo   socket.on('scroll', async (scrollData) => {>>"index.js"
echo     try {>>"index.js"
echo       await page.evaluate((deltaY) => {>>"index.js"
echo         window.scrollBy(0, deltaY);>>"index.js"
echo       }, scrollData.deltaY);>>"index.js"
echo       const screenshot = await page.screenshot({ encoding: 'base64' });>>"index.js"
echo       socket.emit('pageUpdate', screenshot);>>"index.js"
echo     } catch (error) {>>"index.js"
echo       console.error('Error scrolling:', error);>>"index.js"
echo       socket.emit('error', 'Failed to scroll');>>"index.js"
echo     }>>"index.js"
echo   });>>"index.js"
echo.>>"index.js"
echo   socket.on('getElements', async () => {>>"index.js"
echo     try {>>"index.js"
echo       const elements = await page.evaluate(() => {>>"index.js"
echo         const allElements = document.querySelectorAll('*');>>"index.js"
echo         return Array.from(allElements).map(el => {>>"index.js"
echo           const rect = el.getBoundingClientRect();>>"index.js"
echo           return {>>"index.js"
echo             tagName: el.tagName,>>"index.js"
echo             className: el.className,>>"index.js"
echo             id: el.id,>>"index.js"
echo             textContent: el.textContent.trim().substring(0, 50),>>"index.js"
echo             x: rect.x,>>"index.js"
echo             y: rect.y,>>"index.js"
echo             width: rect.width,>>"index.js"
echo             height: rect.height,>>"index.js"
echo             isInput: el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT'>>"index.js"
echo           };>>"index.js"
echo         });>>"index.js"
echo       });>>"index.js"
echo       socket.emit('elements', elements);>>"index.js"
echo     } catch (error) {>>"index.js"
echo       console.error('Error getting elements:', error);>>"index.js"
echo       socket.emit('error', 'Failed to get elements');>>"index.js"
echo     }>>"index.js"
echo   });>>"index.js"
echo.>>"index.js"
echo   socket.on('disconnect', () => {>>"index.js"
echo     console.log('Client disconnected');>>"index.js"
echo   });>>"index.js"
echo });>>"index.js"
echo.>>"index.js"
echo (async () => {>>"index.js"
echo   await setupBrowser();>>"index.js"
echo   server.listen(3000, () => {>>"index.js"
echo     console.log('Server listening on http://localhost:3000');>>"index.js"
echo   });>>"index.js"
echo })();>>"index.js"

echo Creating public directory...
md public
echo Creating public\index.html...
echo <!DOCTYPE html> > "public\index.html"
echo <html lang="en"> >> "public\index.html"
echo <head> >> "public\index.html"
echo   <meta charset="UTF-8"> >> "public\index.html"
echo   <meta name="viewport" content="width=device-width, initial-scale=1.0"> >> "public\index.html"
echo   <title>Real Browser Interaction</title> >> "public\index.html"
echo   <style> >> "public\index.html"
echo     #browser-container { >> "public\index.html"
echo       width: 80%; >> "public\index.html"
echo       margin: 20px auto; >> "public\index.html"
echo       border: 1px solid #ccc; >> "public\index.html"
echo       box-shadow: 0 0 10px rgba(0,0,0,0.1); >> "public\index.html"
echo     } >> "public\index.html"
echo     #address-bar { >> "public\index.html"
echo       padding: 10px; >> "public\index.html"
echo       background-color: #f0f0f0; >> "public\index.html"
echo       display: flex; >> "public\index.html"
echo       align-items: center; >> "public\index.html"
echo     } >> "public\index.html"
echo     #url-input { >> "public\index.html"
echo       flex-grow: 1; >> "public\index.html"
echo       padding: 8px; >> "public\index.html"
echo       margin-right: 5px; >> "public\index.html"
echo     } >> "public\index.html"
echo     #go-button { >> "public\index.html"
echo       padding: 8px 12px; >> "public\index.html"
echo       cursor: pointer; >> "public\index.html"
echo     } >> "public\index.html"
echo     #viewport { >> "public\index.html"
echo       height: 500px; >> "public\index.html"
echo       overflow: hidden; >> "public\index.html"
echo       position: relative; >> "public\index.html"
echo     } >> "public\index.html"
echo     #browser-image { >> "public\index.html"
echo       max-width: 100%; >> "public\index.html"
echo       max-height: 100%; >> "public\index.html"
echo       position: absolute; >> "public\index.html"
echo       top: 0; >> "public\index.html"
echo       left: 0; >> "public\index.html"
echo     } >> "public\index.html"
echo     .element-overlay { >> "public\index.html"
echo       position: absolute; >> "public\index.html"
echo       border: 1px solid blue; >> "public\index.html"
echo       pointer-events: auto; >> "public\index.html"
echo       cursor: pointer; >> "public\index.html"
echo       background-color: rgba(0, 0, 255, 0.1); >> "public\index.html"
echo     } >> "public\index.html"
echo     .element-overlay.highlighted { >> "public\index.html"
echo       border: 2px solid red; >> "public\index.html"
echo       background-color: rgba(255, 0, 0, 0.2); >> "public\index.html"
echo     } >> "public\index.html"
echo     .element-overlay.focused { >> "public\index.html"
echo       border: 2px solid green; >> "public\index.html"
echo       background-color: rgba(0, 255, 0, 0.2); >> "public\index.html"
echo     } >> "public\index.html"
echo     #input-box { >> "public\index.html"
echo       position: absolute; >> "public\index.html"
echo       bottom: 10px; >> "public\index.html"
echo       left: 10px; >> "public\index.html"
echo       display: none; >> "public\index.html"
echo     } >> "public\index.html"
echo     #error-message { >> "public\index.html"
echo       position: absolute; >> "public\index.html"
echo       top: 10px; >> "public\index.html"
echo       left: 10px; >> "public\index.html"
echo       background-color: rgba(255, 0, 0, 0.8); >> "public\index.html"
echo       color: white; >> "public\index.html"
echo       padding: 10px; >> "public\index.html"
echo       display: none; >> "public\index.html"
echo     } >> "public\index.html"
echo   </style> >> "public\index.html"
echo </head> >> "public\index.html"
echo <body> >> "public\index.html"
echo   <div id="browser-container"> >> "public\index.html"
echo     <div id="address-bar"> >> "public\index.html"
echo       <input type="text" id="url-input" placeholder="Enter URL"> >> "public\index.html"
echo       <button id="go-button">Go</button> >> "public\index.html"
echo     </div> >> "public\index.html"
echo     <div id="viewport"> >> "public\index.html"
echo       <img id="browser-image" src="" alt="Browser View"> >> "public\index.html"
echo     </div> >> "public\index.html"
echo     <div id="input-box"> >> "public\index.html"
echo       <input type="text" id="text-input" placeholder="Enter text"> >> "public\index.html"
echo       <button id="send-input">Send</button> >> "public\index.html"
echo     </div> >> "public\index.html"
echo     <div id="error-message"></div> >> "public\index.html"
echo   </div> >> "public\index.html"
echo   <script src="/socket.io/socket.io.js"></script> >> "public\index.html"
echo   <script> >> "public\index.html"
echo     const socket = io(); >> "public\index.html"
echo     const urlInput = document.getElementById('url-input'); >> "public\index.html"
echo     const goButton = document.getElementById('go-button'); >> "public\index.html"
echo     const browserImage = document.getElementById('browser-image'); >> "public\index.html"
echo     const viewport = document.getElementById('viewport'); >> "public\index.html"
echo     const inputBox = document.getElementById('input-box'); >> "public\index.html"
echo     const textInput = document.getElementById('text-input'); >> "public\index.html"
echo     const sendInputButton = document.getElementById('send-input'); >> "public\index.html"
echo     const errorMessage = document.getElementById('error-message'); >> "public\index.html"
echo     let elements = []; >> "public\index.html"
echo     let highlightedElement = null; >> "public\index.html"
echo     let focusedElement = null; >> "public\index.html"
echo.>> "public\index.html"
echo     goButton.addEventListener('click', () => { >> "public\index.html"
echo       const url = urlInput.value; >> "public\index.html"
echo       if (url) { >> "public\index.html"
echo         socket.emit('loadURL', url); >> "public\index.html"
echo       } >> "public\index.html"
echo     }); >> "public\index.html"
echo.>> "public\index.html"
echo     socket.on('pageUpdate', (screenshot) => { >> "public\index.html"
echo       browserImage.src = `data:image/png;base64,${screenshot}`; >> "public\index.html"
echo       socket.emit('getElements'); >> "public\index.html"
echo       inputBox.style.display = 'none'; >> "public\index.html"
echo       if (highlightedElement) { >> "public\index.html"
echo         highlightedElement.classList.remove('highlighted'); >> "public\index.html"
echo         highlightedElement = null; >> "public\index.html"
echo       } >> "public\index.html"
echo       if (focusedElement) { >> "public\index.html"
echo         focusedElement.classList.remove('focused'); >> "public\index.html"
echo         focusedElement = null; >> "public\index.html"
echo       } >> "public\index.html"
echo       errorMessage.style.display = 'none'; >> "public\index.html"
echo     }); >> "public\index.html"
echo.>> "public\index.html"
echo     socket.on('elements', (elementList) => { >> "public\index.html"
echo       elements = elementList; >> "public\index.html"
echo       viewport.querySelectorAll('.element-overlay').forEach(el => el.remove()); >> "public\index.html"
echo       elements.forEach(el => { >> "public\index.html"
echo         const overlay = document.createElement('div'); >> "public\index.html"
echo         overlay.classList.add('element-overlay'); >> "public\index.html"
echo         overlay.style.left = `${el.x}px`; >> "public\index.html"
echo         overlay.style.top = `${el.y}px`; >> "public\index.html"
echo         overlay.style.width = `${el.width}px`; >> "public\index.html"
echo         overlay.style.height = `${el.height}px`; >> "public\index.html"
echo         overlay.title = `${el.tagName} ${el.className} ${el.id} ${el.textContent}`; >> "public\index.html"
echo         overlay.addEventListener('click', (event) => { >> "public\index.html"
echo           if (event.button === 2) { >> "public\index.html"
echo             socket.emit('contextmenu', { selector: getSelector(el) }); >> "public\index.html"
echo             return; >> "public\index.html"
echo           } >> "public\index.html"
echo           if (el.isInput) { >> "public\index.html"
echo             inputBox.style.display = 'block'; >> "public\index.html"
echo             textInput.focus(); >> "public\index.html"
echo             if (highlightedElement) { >> "public\index.html"
echo               highlightedElement.classList.remove('highlighted'); >> "public\index.html"
echo             } >> "public\index.html"
echo             if (focusedElement) { >> "public\index.html"
echo               focusedElement.classList.remove('focused'); >> "public\index.html"
echo             } >> "public\index.html"
echo             highlightedElement = overlay; >> "public\index.html"
echo             overlay.classList.add('highlighted'); >> "public\index.html"
echo             focusedElement = overlay; >> "public\index.html"
echo             overlay.classList.add('focused'); >> "public\index.html"
echo             socket.emit('focus', { selector: getSelector(el) }); >> "public\index.html"
echo           } else { >> "public\index.html"
echo             socket.emit('click', { selector: getSelector(el) }); >> "public\index.html"
echo           } >> "public\index.html"
echo         }); >> "public\index.html"
echo         overlay.addEventListener('mouseover', () => { >> "public\index.html"
echo           socket.emit('hover', { selector: getSelector(el) }); >> "public\index.html"
echo         }); >> "public\index.html"
echo         viewport.appendChild(overlay); >> "public\index.html"
echo       }); >> "public\index.html"
echo     }); >> "public\index.html"
echo.>> "public\index.html"
echo     sendInputButton.addEventListener('click', () => { >> "public\index.html"
echo       if (focusedElement) { >> "public\index.html"
echo         const element = elements.find(el => getSelector(el) === focusedElement.title.split(' ').slice(-1)[0]); >> "public\index.html"
echo         if (element) { >> "public\index.html"
echo           socket.emit('input', { selector: getSelector(element), text: textInput.value }); >> "public\index.html"
echo           textInput.value = ''; >> "public\index.html"
echo           inputBox.style.display = 'none'; >> "public\index.html"
echo         } >> "public\index.html"
echo       } >> "public\index.html"
echo     }); >> "public\index.html"
echo.>> "public\index.html"
echo     document.addEventListener('keydown', (event) => { >> "public\index.html"
echo       if (focusedElement && inputBox.style.display === 'none') { >> "public\index.html"
echo         socket.emit('keydown', { selector: getSelector(focusedElement), key: event.key }); >> "public\index.html"
echo       } >> "public\index.html"
echo     }); >> "public\index.html"
echo.>> "public\index.html"
echo     browserImage.addEventListener('wheel', (event) => { >> "public\index.html"
echo       socket.emit('scroll', { deltaY: event.deltaY }); >> "public\index.html"
echo     }); >> "public\index.html"
echo.>> "public\index.html"
echo     socket.on('error', (message) => { >> "public\index.html"
echo       errorMessage.textContent = message; >> "public\index.html"
echo       errorMessage.style.display = 'block'; >> "public\index.html"
echo     }); >> "public\index.html"
echo.>> "public\index.html"
echo     function getSelector(element) { >> "public\index.html"
echo       if (element.id) return `#${element.id}`; >> "public\index.html"
echo       if (element.className) return `.${element.className.split(' ').join('.')}`; >> "public\index.html"
echo       return element.tagName; >> "public\index.html"
echo     } >> "public\index.html"
echo   </script> >> "public\index.html"
echo </body> >> "public\index.html"
echo </html> >> "public\index.html"

echo Installing dependencies...
npm install

echo Installation complete.
echo To start the tool, run: npm start
pause
